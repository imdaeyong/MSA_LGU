강사명: 인경열
공유: https://github.com/inky4832/


1일차
가. 환경설정

  JDK ( 1.8 )
  https://www.oracle.com/kr/java/technologies/javase/javase-jdk8-downloads.html

  STS ( sts 3.9.14 , eclipse 4.15)
  https://spring.io/tools

  h2
  https://www.h2database.com/html/main.html

  스프링부트 프로젝트 생성
  https://start.spring.io/

# 리뷰 내용
1. 빌드 툴(maven)
   pom.xml 파일에 의존성 설정.

   http://mvnrepository.com

2. SpringBoot의 환경설정 파일

   application.properties
   application.yml

   예> server.port=8081

3.  내장 톰캣 사용
   spring-boot-starter-web


4. 추가되는 컴포넌트(빈)는 
반드시 @SpringBootApplication 로 지정된
  Application파일의 패키지의 서브패키지 형태로 
  설정해야 된다.

  ==> 추가되는 컴포넌트들이 생성된다.
  ==> 마킹 어노테이션
      @RestController
      @Controller
      @Service
      @Repository
      @Component
      ..
    
5. 요청 URL
  http://localhost:8081/컨텍스트명/서블릿맵핑/hello
 =>http://localhost:8081/hello
localhost:  호스트 ip번호
 8081   : 톰캣 port번호 ( 기본:8080)
   변경가능?
   application.properties
   (key=value  설정)
   에서
   server.port=8081

컨텍스트명: 현재 지정안됨.
    server.servlet.context-path=/aaa

서블릿맵핑: 스프링에서는 DispatchServlet 자동지원.  
        서블릿 맵핑값은 /로 자동지정되어있음.

hello : Controller클래스의 
        @RequestMapping("/hello") 일치.
	요청매핑값: /hello
	
최종적으로 기억해야되는 URL?
http://localhost:8081/컨텍스트명/서블릿맵핑/요청매핑/자원


6. Controller 클래스
  역할: 웹브라우저가 요청시 가장 entry point 역할

  가. @Controller
      ==> 실행결과를 html(JSP)로 반환시
      ==> 필요시 실행결과를 데이터(text, JSON, XML )로 반환하려면
         추가로 @ResponseBody 어노테이션이 필요하다.

  나. @RestController (*****)
      ==> 실행결과를 데이터(text, JSON, XML )로 반환시
      ==> @Controller + @ResponseBody 포함한 기능

     *Controller 에서 반환값에 따라서 데이터가 달라진다.
       a. public List<String> hello() 
         ==> 화면에 JSON의 배열형식으로 반환
	   예> ["홍길동","이순신",...]
       b. public String  hello()
       ==> 화면에 문자열 형식으로 반환

       c. public User  hello()
       ==> 화면에 JSON의 객체형식으로 반환

           {
		"name": "홍길동",
		"age": 20
	   }

       d. public List<User>  hello()
       ==> 화면에 JSON의 객체형식으로 반환
	   [
		{
		"name": "홍길동1",
		"age": 30
		},
		{
		"name": "홍길동2",
		"age": 20
		}
	    ]
7. DI(Dependency Injection: 의존성 주입)
  ==> 임의의 A에서 B 사용

  가. 생성자 이용 주입 (*****, 자사에서 사용)
    ==> HelloService 반드시 사용하는 의도 내포
   @RestController
public class HelloController {
	private HelloService service;
	// 생성자 이용하여 주입 받는다.
	public HelloController(HelloService service) {
		this.service = service;
	}
	
  나. @Autowired 주입
==> HelloService 반드시 사용하는 의도가 덜함
   @RestController
public class HelloController {
	
	@Autowired(required=false)
	private HelloService service;


8. 웹 어플리케이션 개발 방법
 가. SOAP 서비스
    ==> 일반적인 웹 어플리케이션 방법
    ==> 요청방법
        가. get 방식
	  ==> 사용자가 입력한 데이터(파라미터)가
	     URL 포함되어 전달
	     http://localhost:8080/searchUser?id=1234&pw=9876

	나. post 방식
          ==> 사용자가 입력한 데이터(파라미터)가
	     URL 포함되지 않고 body 숨겨서 전달
	     http://localhost:8080/searchUser
	
	     body: id=1234&pw=9876

 나. RESTful 서비스 (*****)
     ==> 사용자가 입력한 데이터(파라미터)를 url에 포함해서 요청
      http://localhost:8080/id/1234/pw/9876
      
    ==> method 사용하여 의도를 내포                   스프링의 Controller
      가. get :   select 의도  ================>  @GetMapping , @RequestMapping(value="/aa", method=RequestMethod.GET)
      나. post:   insert 의도  ================>  @PostMapping  , @RequestMapping(value="/aa", method=RequestMethod.POST) 
      다. put :   update 의도  ================>  @PutMapping  , @RequestMapping(value="/aa", method=RequestMethod.PUT)
      라. delete:  delete 의도  ================> @DeleteMapping  , @RequestMapping(value="/aa", method=RequestMethod.DELETE)